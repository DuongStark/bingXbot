from trade_executor import get_account_balance, calculate_position_size
from data_fetcher import get_current_price
from logger import log_event

def test_margin_debug():
    """Test function ƒë·ªÉ debug margin issues"""
    
    print("=== DEBUGGING INSUFFICIENT MARGIN ===")
    
    # 1. Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n
    balance_info = get_account_balance()
    if not balance_info:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n!")
        return
    
    # 2. L·∫•y gi√° hi·ªán t·∫°i
    current_price = get_current_price()
    if not current_price:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° BTC!")
        return
    
    print(f"üí∞ Gi√° BTC hi·ªán t·∫°i: ${current_price:.1f}")
    
    # 3. Test v·ªõi c√°c trade amount kh√°c nhau
    test_cases = [
        {"amount": 100, "leverage": 5},
        {"amount": 200, "leverage": 5}, 
        {"amount": 500, "leverage": 5},
        {"amount": 1000, "leverage": 8},
        {"amount": 1500, "leverage": 6},
    ]
    
    for case in test_cases:
        amount = case["amount"]
        leverage = case["leverage"]
        
        print(f"\nüìä Test: ${amount} v·ªõi {leverage}x leverage")
        
        try:
            quantity, safe_amount = calculate_position_size(
                trade_amount_usd=amount,
                current_price=current_price,
                leverage=leverage,
                sl_price=None,
                account_balance=balance_info['available_margin']
            )
            
            margin_needed = safe_amount
            position_value = safe_amount * leverage
            
            print(f"   Quantity BTC: {quantity:.6f}")
            print(f"   Safe amount: ${safe_amount:.2f}")
            print(f"   Position value: ${position_value:.2f}")
            print(f"   Margin needed: ${margin_needed:.2f}")
            print(f"   Available margin: ${balance_info['available_margin']:.2f}")
            
            if margin_needed <= balance_info['available_margin']:
                print(f"   ‚úÖ OK - ƒê·ªß margin")
            else:
                print(f"   ‚ùå FAIL - Thi·∫øu ${margin_needed - balance_info['available_margin']:.2f}")
                
        except Exception as e:
            print(f"   ‚ùå ERROR: {e}")

if __name__ == "__main__":
    test_margin_debug()